diff --git a/vendor/riscv/riscv-isa-sim/Makefile.in b/vendor/riscv/riscv-isa-sim/Makefile.in
index 39b93e8dd..f6f85d02e 100644
--- a/vendor/riscv/riscv-isa-sim/Makefile.in
+++ b/vendor/riscv/riscv-isa-sim/Makefile.in
@@ -62,6 +62,12 @@ install_hdrs_dir := $(INSTALLDIR)/include
 install_libs_dir := $(INSTALLDIR)/lib
 install_exes_dir := $(INSTALLDIR)/bin
 
+#-------------------------------------------------------------------------
+# Location of the project itself
+#-------------------------------------------------------------------------
+
+PROJECTDIR = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/..
+
 #-------------------------------------------------------------------------
 # List of subprojects
 #-------------------------------------------------------------------------
@@ -70,8 +76,9 @@ sprojs         := @subprojects@
 sprojs_enabled := @subprojects_enabled@
 
 EDA_INCLUDES := -I$(VCS_HOME)/include -I/$(QUESTASIM_HOME)/include -I$(XCEL_HOME)/include -I$(VERILATOR_INSTALL_DIR)/share/verilator/include/vltstd/
+YAML_CPP_INCLUDES := -I$(install_hdrs_dir)
 
-sprojs_include := -I. -I$(src_dir) $(addprefix -I$(src_dir)/, $(sprojs_enabled)) $(EDA_INCLUDES)
+sprojs_include := -I. -I$(src_dir) $(addprefix -I$(src_dir)/, $(sprojs_enabled)) $(EDA_INCLUDES) $(YAML_CPP_INCLUDES)
 VPATH := $(addprefix $(src_dir)/, $(sprojs_enabled))
 
 #-------------------------------------------------------------------------
@@ -106,6 +113,32 @@ mcppbs-CXXFLAGS := $(mcppbs-CFLAGS) $(default-CXXFLAGS) @CXXFLAGS@
 CC            := @CC@
 CXX           := @CXX@
 
+#-------------------------------------------------------------------------
+# Yaml-cpp headers are a prerequisite to all object files.
+# The yaml-cpp library is a prerequisite to all libs and binaries.
+#-------------------------------------------------------------------------
+YAMLDIR = $(PROJECTDIR)/yaml-cpp
+
+yaml-cpp : $(install_libs_dir)/libyaml-cpp.so
+
+yaml-cpp-static: $(install_libs_dir)/libyaml-cpp.a
+
+# Build and install the shared version of the library and the headers.
+$(install_hdrs_dir)/yaml-cpp $(install_libs_dir)/libyaml-cpp.so :
+	rm -rf $(YAMLDIR)/build
+	cmake -S $(YAMLDIR) -B $(YAMLDIR)/build -DCMAKE_INSTALL_PREFIX=$(INSTALLDIR) -DCMAKE_INSTALL_LIBDIR=$(install_libs_dir) -DYAML_BUILD_SHARED_LIBS=on
+	make -C $(YAMLDIR)/build
+	make -C $(YAMLDIR)/build install
+
+# Build and install the static version of the library.
+$(install_libs_dir)/libyaml-cpp.a :
+	rm -rf $(YAMLDIR)/build
+	cmake -S $(YAMLDIR) -B $(YAMLDIR)/build -DCMAKE_INSTALL_PREFIX=$(INSTALLDIR) -DCMAKE_INSTALL_LIBDIR=$(install_libs_dir) -DYAML_BUILD_SHARED_LIBS=off
+	make -C $(YAMLDIR)/build
+	make -C $(YAMLDIR)/build install
+
+.PHONY : yaml-cpp yaml-cpp-static
+
 # These are the flags actually used for a C++ compile or a C compile.
 # The language-specific flags come after the preprocessor flags, but
 # user-supplied flags always take precedence.
@@ -125,9 +158,9 @@ mcppbs-LDFLAGS := @LDFLAGS@ @BOOST_LDFLAGS@
 all-link-flags := $(mcppbs-LDFLAGS) $(LDFLAGS)
 
 comma := ,
-LD            := $(CXX)
-LIBS          := @LIBS@ @BOOST_ASIO_LIB@ @BOOST_REGEX_LIB@
-LINK          := $(LD) -L. $(all-link-flags) -Wl,-rpath,$(install_libs_dir) $(patsubst -L%,-Wl$(comma)-rpath$(comma)%,$(filter -L%,$(LDFLAGS)))
+LD            := $(CXX) 
+LIBS          := @LIBS@ @BOOST_ASIO_LIB@ @BOOST_REGEX_LIB@ -lyaml-cpp
+LINK          := $(LD) -L. -L$(YAMLDIR)/build $(all-link-flags) -Wl,-rpath,$(install_libs_dir) $(patsubst -L%,-Wl$(comma)-rpath$(comma)%,$(filter -L%,$(LDFLAGS)))
 
 # Library creation
 
@@ -223,7 +256,7 @@ $(2)_deps += $$(patsubst %.o, %.d, $$($(2)_c_objs))
 $(2)_deps += $$(patsubst %.h, %.h.d, $$($(2)_precompiled_hdrs))
 $$($(2)_pch) : %.h.gch : %.h
 	$(COMPILE) -x c++-header $$< -c -o $$@
-$$($(2)_objs) : %.o : %.cc $$($(2)_gen_hdrs) $$($(2)_pch)
+$$($(2)_objs) : %.o : %.cc $$($(2)_gen_hdrs) $$($(2)_pch) $(install_hdrs_dir)/yaml-cpp
 	$(COMPILE) $(if $(HAVE_CLANG_PCH), $$(if $$($(2)_pch), -include-pch $$($(2)_pch))) $$($(2)_CFLAGS) -c $$<
 $$($(2)_c_objs) : %.o : %.c $$($(2)_gen_hdrs)
 	$(COMPILE_C) $$($(2)_CFLAGS) -c $$<
@@ -248,7 +281,7 @@ lib$(1).a : $$($(2)_objs) $$($(2)_c_objs)
 	rm -f $$@
 	$(AR) rcs $$@ $$^
 lib$(1).so : $$($(2)_objs) $$($(2)_c_objs) $$($(2)_lib_libnames_shared) $$($(2)_lib_libnames)
-	$(LINK) -shared -o $$@ $(if $(filter Darwin,$(shell uname -s)),-install_name $(install_libs_dir)/$$@) $$^ $$($(2)_lib_libnames) $(LIBS)
+	$(LINK) -shared -o $$@ $(if $(filter Darwin,$(shell uname -s)),-install_name $(install_libs_dir)/$$@) $$^ $$($(2)_lib_libnames) $(LIBS) $$($(2)_LDFLAGS)
 
 $(2)_junk += lib$(1).a
 $(2)_junk += $$(if $$($(2)_install_shared_lib),lib$(1).so,)
@@ -267,7 +300,7 @@ $$($(2)_test_objs) : %.o : %.cc
 	$(COMPILE) -c $$<
 
 $$($(2)_test_exes) : %-utst : %.t.o $$($(2)_test_libnames)
-	$(LINK) -o $$@ $$< $$($(2)_test_libnames) $(LIBS)
+	$(LINK) -o $$@ $$< $$($(2)_test_libnames) $(LIBS) $$($(2)_LDFLAGS)
 
 $(2)_deps += $$($(2)_test_deps)
 $(2)_junk += \
@@ -293,8 +326,8 @@ $(2)_prog_libarg    := $$(patsubst %, -l%, $$($(2)_prog_libs))
 $$($(2)_prog_objs) : %.o : %.cc
 	$(COMPILE) -c $$<
 
-$$($(2)_prog_exes) : % : %.o $$($(2)_prog_libnames)
-	$(LINK) -o $$@ $$< $$($(2)_prog_libnames) $(LIBS)
+$$($(2)_prog_exes) : % : %.o $$($(2)_prog_libnames) 
+	$(LINK) -o $$@ $$< $$($(2)_prog_libnames) $(LIBS) $$($(2)_LDFLAGS)
 
 $(2)_deps += $$($(2)_prog_deps)
 $(2)_junk += $$($(2)_prog_objs) $$($(2)_prog_deps) $$($(2)_prog_exes)
@@ -309,7 +342,7 @@ $$($(2)_install_prog_objs) : %.o : %.cc $$($(2)_gen_hdrs)
 	$(COMPILE) -c $$<
 
 $$($(2)_install_prog_exes) : % : %.o $$($(2)_prog_libnames)
-	$(LINK) -o $$@ $$< $$($(2)_prog_libnames) $(LIBS)
+	$(LINK) -o $$@ $$< $$($(2)_prog_libnames) $(LIBS) $$($(2)_LDFLAGS)
 
 $(2)_deps += $$($(2)_install_prog_deps)
 $(2)_junk += \
@@ -399,6 +432,8 @@ install-hdrs : $(install_hdrs)
     $(INSTALL_HDR) $(src_dir)/$$file $(install_hdrs_dir)/`dirname $$file`; \
   done
 
+# All install_libs depend on the installation of the yaml-cpp shared library.
+$(install_libs) : $(install_libs_dir)/libyaml-cpp.so
 install-libs : $(install_libs)
 	$(MKINSTALLDIRS) $(install_libs_dir)
 	for file in $^; \
@@ -406,6 +441,9 @@ install-libs : $(install_libs)
     $(INSTALL_LIB) $$file $(install_libs_dir); \
   done
 
+# All install_exes depend on the installation of the yaml-cpp shared library.
+$(install_exes) : $(install_libs_dir)/libyaml-cpp.so
+
 install-exes : $(install_exes)
 	$(MKINSTALLDIRS) $(install_exes_dir)
 	for file in $^; \
@@ -498,8 +536,8 @@ junk += $(project_name)-*.tar.gz
 # Default
 #-------------------------------------------------------------------------
 
-all : $(install_hdrs) $(install_libs) $(install_exes)
-.PHONY : all
+all : yaml-cpp $(install_hdrs) $(install_libs) $(install_exes)
+.PHONY : yaml-cpp all
 
 #-------------------------------------------------------------------------
 # Makefile debugging
diff --git a/vendor/riscv/riscv-isa-sim/fesvr/fesvr.mk.in b/vendor/riscv/riscv-isa-sim/fesvr/fesvr.mk.in
index 1d6bc866a..a92166d29 100644
--- a/vendor/riscv/riscv-isa-sim/fesvr/fesvr.mk.in
+++ b/vendor/riscv/riscv-isa-sim/fesvr/fesvr.mk.in
@@ -1,3 +1,5 @@
+fesvr_subproject_deps = \
+
 fesvr_install_hdrs = \
   byteorder.h \
   elf.h \
diff --git a/vendor/riscv/riscv-isa-sim/riscv/Params.cc b/vendor/riscv/riscv-isa-sim/riscv/Params.cc
index 6e44a063f..f6ca19cd8 100644
--- a/vendor/riscv/riscv-isa-sim/riscv/Params.cc
+++ b/vendor/riscv/riscv-isa-sim/riscv/Params.cc
@@ -26,6 +26,26 @@ void Params::cfg_to_params(cfg_t &cfg, Params &params) {
   params.set_uint64_t("/top/core/0/", "pmpregions", (cfg.pmpregions));
 }
 
+void dump_param(Param &p) {
+  std::cerr << p.base << p.name << " = (" << p.type << ") " ;
+  if (p.type == "string")
+    std::cerr << p.a_string;
+  else if (p.type == "uint64_t")
+    std::cerr << "0x" << std::hex << p.a_uint64_t;
+  else if (p.type == "bool")
+    std::cerr << (p.a_bool ? "true" : "false");
+  else
+    std::cerr << "<unsupported_type<" << p.type << ">>";
+}
+
+void Params::dump(void) {
+  for (auto it_base = v.begin(); it_base != v.end(); it_base++)
+    for (auto it_parm = it_base->second.begin(); it_parm != it_base->second.end(); it_parm++) {
+      dump_param(it_parm->second);
+      std::cerr << std::endl;
+    }
+}
+
 void print_center(string &str, const size_t line_length) {
   size_t str_length = str.length();
   size_t how_many = (line_length - str_length) / 2;
diff --git a/vendor/riscv/riscv-isa-sim/riscv/Params.h b/vendor/riscv/riscv-isa-sim/riscv/Params.h
index fb500a694..41dbc2524 100644
--- a/vendor/riscv/riscv-isa-sim/riscv/Params.h
+++ b/vendor/riscv/riscv-isa-sim/riscv/Params.h
@@ -181,6 +181,8 @@ public:
 
   void print_table(string param_set);
 
+  void dump(void);
+
   std::vector<size_t> get_hartids() {
     std::vector<size_t> mhartids;
     regex regexp("/top/proc/[0-9]+");
diff --git a/vendor/riscv/riscv-isa-sim/riscv/Proc.cc b/vendor/riscv/riscv-isa-sim/riscv/Proc.cc
index 6d392f176..7058a1b09 100644
--- a/vendor/riscv/riscv-isa-sim/riscv/Proc.cc
+++ b/vendor/riscv/riscv-isa-sim/riscv/Proc.cc
@@ -298,93 +298,122 @@ Processor::~Processor() {
 }
 
 void Processor::default_params(string base, openhw::Params &params) {
-  params.set_string(base, "isa", "RV32GC", "RV32GC",
-             "ISA");
-  params.set_string(base, "priv", DEFAULT_PRIV, DEFAULT_PRIV, "Privilege Level");
-  params.set_uint64_t(base, "boot_addr", 0x80000000UL, "0x80000000UL",
-             "First PC of the core");
-  params.set_string(base, "mmu_mode", "sv39", "sv39",
-             "Memory virtualization mode");
-
-  params.set_uint64_t(base, "pmpregions", 0x0UL, "0x0",
-             "Number of PMP regions");
-  params.set_uint64_t(base, "pmpaddr0", 0x0UL, "0x0",
-             "Default PMPADDR0 value");
-  params.set_uint64_t(base, "pmpcfg0", 0x0UL, "0x0",
-             "Default PMPCFG0 value");
-  params.set_uint64_t(base, "marchid", 0x3UL, "0x3", "MARCHID value");
-  params.set_uint64_t(base, "mhartid", 0x0UL, "0x0", "MHARTID value");
-  params.set_uint64_t(base, "mvendorid", 0x00000602UL, "0x00000602UL",
-             "MVENDORID value");
-
-  params.set_uint64_t(base, "debug_handler_addr", 0x1a110800, "0x1a110800",
-             "Debug handler Address");
-
-  params.set_uint64_t(base, "debug_exception_handler_addr", 0x1A140000, "0x1A140000",
-             "Debug handler Address");
-
-  params.set_string(base, "extensions", "", "", "Possible extensions: cv32a60x, cvxif");
-
-  params.set_bool(base, "misaligned", false, "false",
-             "Support for misaligned memory operations");
-
-  params.set_bool(base, "csr_counters_injection", false, "false",
-             "Allow to set CSRs getting values from DPI");
-
-  params.set_bool(base, "interrupts_injection", true, "true",
-             "Allow to set MIP csr with values from DPI");
-
-  params.set_bool(base, "debug_injection", true, "true",
-             "Allow to enter in debug mode with values from DPI");
-
-  params.set_bool(base, "hide_csrs_based_on_priv", false, "false",
-             "Allow to hide CSRs based on priv modes available.");
-
-  params.set_uint64_t(base, "mtvec_vectored_alignment", 0x4UL, "0x4",
-             "Default alignment for mtvec when vector mode active");
-
-  params.set_bool(base, "override_custom_extensions", true, "false",
-             "Allow to override custom extensions value.");
-
-  params.set_bool(base, "override_custom_extensions_value", false, "false",
-             "Value for the custom extensions override.");
-
-  params.set_bool(base, "non_standard_interrupts", false, "false",
-             "Value for the custom extensions override.");
-
-  params.set_bool(base, "unified_traps", false, "false",
-             "Unify all kind of traps with the exceptions.");
-
-  params.set_uint64_t(base, "nmi_mcause", 0x00000020, "0x00000020",
-             "Value of MCAUSE in case of NMI. It does not include the interrupt bit.");
+  if (!params.exist(base, "isa"))
+    params.set_string(base, "isa", "RV32GC", "RV32GC", "ISA");
+  if (!params.exist(base, "priv"))
+    params.set_string(base, "priv", DEFAULT_PRIV, DEFAULT_PRIV, "Privilege Level");
+  if (!params.exist(base, "boot_addr"))
+    params.set_uint64_t(base, "boot_addr", 0x80000000UL, "0x80000000UL",
+                        "First PC of the core");
+  if (!params.exist(base, "mmu_mode"))
+    params.set_string(base, "mmu_mode", "sv39", "sv39",
+                      "Memory virtualization mode");
+
+  if (!params.exist(base, "pmpregions"))
+    params.set_uint64_t(base, "pmpregions", 0x0UL, "0x0",
+                        "Number of PMP regions");
+  if (!params.exist(base, "pmpaddr0"))
+    params.set_uint64_t(base, "pmpaddr0", 0x0UL, "0x0",
+			"Default PMPADDR0 value");
+  if (!params.exist(base, "pmpcfg0"))
+    params.set_uint64_t(base, "pmpcfg0", 0x0UL, "0x0",
+			"Default PMPCFG0 value");
+  if (!params.exist(base, "marchid"))
+    params.set_uint64_t(base, "marchid", 0x3UL, "0x3", "MARCHID value");
+  if (!params.exist(base, "mhartid"))
+    params.set_uint64_t(base, "mhartid", 0x0UL, "0x0", "MHARTID value");
+  if (!params.exist(base, "mvendorid"))
+    params.set_uint64_t(base, "mvendorid", 0x00000602UL, "0x00000602UL",
+			"MVENDORID value");
+
+  if (!params.exist(base, "debug_handler_addr"))
+    params.set_uint64_t(base, "debug_handler_addr", 0x1a110800, "0x1a110800",
+			"Debug handler Address");
+
+  if (!params.exist(base, "debug_exception_handler_addr"))
+    params.set_uint64_t(base, "debug_exception_handler_addr", 0x1A140000, "0x1A140000",
+			"Debug handler Address");
+
+  if (!params.exist(base, "extensions"))
+    params.set_string(base, "extensions", "", "", "Possible extensions: cv32a60x, cvxif");
+
+  if (!params.exist(base, "misaligned"))
+    params.set_bool(base, "misaligned", false, "false",
+		    "Support for misaligned memory operations");
+
+  if (!params.exist(base, "csr_counters_injection"))
+    params.set_bool(base, "csr_counters_injection", false, "false",
+		    "Allow to set CSRs getting values from DPI");
+
+  if (!params.exist(base, "interrupts_injection"))
+    params.set_bool(base, "interrupts_injection", true, "true",
+		    "Allow to set MIP csr with values from DPI");
+
+  if (!params.exist(base, "debug_injection"))
+    params.set_bool(base, "debug_injection", true, "true",
+		    "Allow to enter in debug mode with values from DPI");
+
+  if (!params.exist(base, "hide_csrs_based_on_priv"))
+    params.set_bool(base, "hide_csrs_based_on_priv", false, "false",
+		    "Allow to hide CSRs based on priv modes available.");
+
+  if (!params.exist(base, "mtvec_vectored_alignment"))
+    params.set_uint64_t(base, "mtvec_vectored_alignment", 0x4UL, "0x4",
+			"Default alignment for mtvec when vector mode active");
+
+  if (!params.exist(base, "override_custom_extensions"))
+    params.set_bool(base, "override_custom_extensions", true, "false",
+		    "Allow to override custom extensions value.");
+
+  if (!params.exist(base, "override_custom_extensions_value"))
+    params.set_bool(base, "override_custom_extensions_value", false, "false",
+		    "Value for the custom extensions override.");
+
+ if (!params.exist(base, "non_standard_interrupts"))
+     params.set_bool(base, "non_standard_interrupts", false, "false",
+		     "Value for the custom extensions override.");
+
+  if (!params.exist(base, "unified_traps"))
+    params.set_bool(base, "unified_traps", false, "false",
+		    "Unify all kind of traps with the exceptions.");
+
+  if (!params.exist(base, "nmi_mcause"))
+    params.set_uint64_t(base, "nmi_mcause", 0x00000020, "0x00000020",
+			"Value of MCAUSE in case of NMI. It does not include the interrupt bit.");
 
   for (auto it = Processor::csr_params.begin(); it != Processor::csr_params.end(); it++) {
       string csr_name = it->second.name;
       if (it->second.override_mask_param) {
-        params.set_uint64_t(base, csr_name + "_override_value", (0x0UL), "0x0",
-                    csr_name + " CSR override value");
-        params.set_uint64_t(base, csr_name + "_override_mask", (0x0UL), "0x0",
-                    csr_name + " CSR override mask");
+	if (!params.exist(base, csr_name + "_override_value"))
+          params.set_uint64_t(base, csr_name + "_override_value", (0x0UL), "0x0",
+			      csr_name + " CSR override value");
+        if (!params.exist(base, csr_name + "_override_mask"))
+          params.set_uint64_t(base, csr_name + "_override_mask", (0x0UL), "0x0",
+			      csr_name + " CSR override mask");
       }
       if (it->second.presence_param) {
-        params.set_bool(base, csr_name + "_presence", true, "true",
-                    csr_name + " CSR presence");
+        if (!params.exist(base, csr_name + "_presence"))
+          params.set_bool(base, csr_name + "_presence", true, "true",
+			  csr_name + " CSR presence");
       }
       if (it->second.write_enable_param) {
-        params.set_bool(base, csr_name + "_we_enable", false, "false",
-                    csr_name +" CSR Write Enable param enable");
-        params.set_bool(base, csr_name + "_we", false, "false",
-                    csr_name + " CSR Write Enable value");
+        if (!params.exist(base, csr_name + "_we_enable"))
+          params.set_bool(base, csr_name + "_we_enable", false, "false",
+			  csr_name +" CSR Write Enable param enable");
+        if (!params.exist(base, csr_name + "_we"))
+          params.set_bool(base, csr_name + "_we", false, "false",
+			  csr_name + " CSR Write Enable value");
       }
       if (it->second.write_mask_param) {
-        params.set_uint64_t(base, csr_name + "_write_mask", ((uint64_t) -1ULL), "0xFFFFFFFF",
+        if (!params.exist(base, csr_name + "_write_mask"))
+          params.set_uint64_t(base, csr_name + "_write_mask", ((uint64_t) -1ULL), "0xFFFFFFFF",
                     csr_name + " CSR write mask");
       }
   }
 
-  params.set_uint64_t(base, "trigger_count", 0x0000004, "0x00000004",
-             "Number of enabled triggers");
-
+  if (!params.exist(base, "trigger_count"))
+    params.set_uint64_t(base, "trigger_count", 0x0000004, "0x00000004",
+			"Number of enabled triggers");
 }
 
 inline void Processor::set_XPR(reg_t num, reg_t value) {
diff --git a/vendor/riscv/riscv-isa-sim/riscv/Simulation.cc b/vendor/riscv/riscv-isa-sim/riscv/Simulation.cc
index e52668af2..cff33ca00 100644
--- a/vendor/riscv/riscv-isa-sim/riscv/Simulation.cc
+++ b/vendor/riscv/riscv-isa-sim/riscv/Simulation.cc
@@ -36,29 +36,38 @@ debug_module_config_t dm_config = {.progbufsize = 2,
                                    .support_impebreak = true};
 
 void Simulation::default_params(openhw::Params &params) {
-  params.set_bool("/top/", "generic_core_config", true, "true",
-             "Make generic configuration for all cores");
-
-  params.set_bool("/top/", "bootrom", true, "true",
-             "bootrom enable");
-  params.set_uint64_t("/top/", "bootrom_base", 0x10000UL,
-             "0x10000", "bootrom address");
-  params.set_uint64_t("/top/", "bootrom_size", 0x1000UL, "0x1000",
-             "bootrom size");
-
-  params.set_bool("/top/", "dram_enable", true, "true", "DRAM enable");
-  params.set_uint64_t("/top/", "dram_base", 0x80000000UL,
-             "0x80000000", "DRAM base address");
-  params.set_uint64_t("/top/", "dram_size", 0x400UL * 1024 * 1024,
-             "0x40000000", "DRAM size");
-
-  params.set_bool("/top/", "log_commits", true, "True",
-             "Log commit enable");
-
-  params.set_bool("/top/", "max_steps_enabled", false, "False",
-             "Maximum steps enable");
-  params.set_uint64_t("/top/", "max_steps", 200000UL, "200000",
-             "Maximum steps that the simulation can do ");
+  if (!params.exist("/top/", "generic_core_config"))
+    params.set_bool("/top/", "generic_core_config", true, "true",
+                    "Make generic configuration for all cores");
+  if (!params.exist("/top/", "bootrom"))
+    params.set_bool("/top/", "bootrom", true, "true",
+                    "bootrom enable");
+  if (!params.exist("/top/", "bootrom_base"))
+    params.set_uint64_t("/top/", "bootrom_base", 0x10000UL,
+                        "0x10000", "bootrom address");
+  if (!params.exist("/top/", "bootrom_size"))
+    params.set_uint64_t("/top/", "bootrom_size", 0x1000UL, "0x1000",
+                        "bootrom size");
+
+  if (!params.exist("/top/", "dram_enable"))
+    params.set_bool("/top/", "dram_enable", true, "true", "DRAM enable");
+  if (!params.exist("/top/", "dram_base"))
+    params.set_uint64_t("/top/", "dram_base", 0x80000000UL,
+                        "0x80000000", "DRAM base address");
+  if (!params.exist("/top/", "dram_size"))
+    params.set_uint64_t("/top/", "dram_size", 0x400UL * 1024 * 1024,
+                        "0x40000000", "DRAM size");
+
+  if (!params.exist("/top/", "log_commits"))
+    params.set_bool("/top/", "log_commits", true, "True",
+                    "Log commit enable");
+
+  if (!params.exist("/top/", "max_steps_enabled"))
+    params.set_bool("/top/", "max_steps_enabled", false, "False",
+                    "Maximum steps enable");
+  if (!params.exist("/top/", "max_steps_enabled"))
+    params.set_bool("/top/", "max_steps_enabled", 200000UL, "200000",
+                    "Maximum steps that the simulation can do ");
 
   Processor::default_params("/top/cores/", params);
 }
@@ -74,12 +83,11 @@ Simulation::Simulation(
     : sim_t(cfg, halted, mems, plugin_devices, args, dm_config, log_path,
             dtb_enabled, dtb_file, socket_enabled, cmd_file, params) {
 
-  Simulation::default_params(this->params);
   // It seems mandatory to set cache block size for MMU.
   // FIXME TODO: Use actual cache configuration (on/off, # of ways/sets).
   // FIXME TODO: Support multiple cores.
   get_core(0)->get_mmu()->set_cache_blocksz(reg_t(64));
-
+  this->default_params(this->params);
   Params::parse_params("/top/", this->params, params);
 
   const std::vector<mem_cfg_t> layout;
@@ -92,7 +100,6 @@ Simulation::Simulation(
   string isa_str = (this->params["/top/isa"]).a_string;
   string priv_str = (this->params["/top/priv"]).a_string;
   this->isa = isa_parser_t(isa_str.c_str(), priv_str.c_str());
-
   this->reset();
 
   bool commitlog = (this->params["/top/log_commits"]).a_bool;
diff --git a/vendor/riscv/riscv-isa-sim/riscv/YamlParamSetter.cc b/vendor/riscv/riscv-isa-sim/riscv/YamlParamSetter.cc
new file mode 100644
index 000000000..75d51ccb7
--- /dev/null
+++ b/vendor/riscv/riscv-isa-sim/riscv/YamlParamSetter.cc
@@ -0,0 +1,56 @@
+#include "YamlParamSetter.h"
+
+namespace openhw {
+    YamlParamSetter::YamlParamSetter(Params* params, std::string yamlFilePath) {
+        this->params = params;
+        this->yamlFilePath = yamlFilePath;
+    }
+
+    void YamlParamSetter::setParams() {
+        YAML::Node config = this->loadConfigFile();
+        this->setSimulationParameters(config["spike_param_tree"], "/top/", "/top/");
+
+        for(size_t i = 0; i < config["spike_param_tree"]["core_configs"].size(); i++){
+            this->setSimulationParameters(config["spike_param_tree"]["core_configs"][i], "/top/cores/", "/top/core/" + std::to_string(i) + "/");
+        }
+    }
+
+    YAML::Node YamlParamSetter::loadConfigFile() {
+        try{
+            YAML::Node config = YAML::LoadFile(this->yamlFilePath);
+            std::cerr << "[SPIKE] Successfully parsed config file" << endl;
+            return config;
+        } catch(exception& e) {
+            std::cerr << "[SPIKE] Loading config file failed... : " << e.what() << endl;
+            throw;
+        }
+    }
+
+    void YamlParamSetter::setSimulationParameters(YAML::Node config, std::string base, std::string paramBase) {
+        for(YAML::const_iterator it = config.begin(); it != config.end(); ++it) {
+            if (it->first.as<std::string>() == "core_configs") continue;
+            this->redefineParameter(base, paramBase, it);
+        }
+    }
+
+    void YamlParamSetter::redefineParameter(std::string base, std::string paramBase, YAML::const_iterator paramIterator) {
+        std::string paramName = paramIterator->first.as<std::string>();
+        std::string setValue = "";
+        Param param = this->params->get(base, paramName);
+        if (param.type == "string") {
+            std::string stringValue = paramIterator->second.as<std::string>();
+            this->params->set_string(paramBase, paramName, stringValue, param.default_value, param.description);
+            std::cout << "[OK] " << paramBase + paramName << ": " << stringValue << endl;
+        }
+        else if (param.type == "bool") {
+            bool boolValue = paramIterator->second.as<bool>();
+            this->params->set_bool(paramBase, paramName, boolValue, param.default_value, param.description);
+            std::cout << "[OK] " << paramBase + paramName << ": " << boolValue << endl;
+        }
+        else if (param.type == "uint64_t") {
+            uint64_t uint64Value = paramIterator->second.as<uint64_t>();
+            this->params->set_uint64_t(paramBase, paramName, uint64Value, param.default_value, param.description);
+            std::cout << "[OK] " << paramBase + paramName << ": " << uint64Value << endl;
+        }
+    }
+}
diff --git a/vendor/riscv/riscv-isa-sim/riscv/YamlParamSetter.h b/vendor/riscv/riscv-isa-sim/riscv/YamlParamSetter.h
new file mode 100644
index 000000000..bfe543014
--- /dev/null
+++ b/vendor/riscv/riscv-isa-sim/riscv/YamlParamSetter.h
@@ -0,0 +1,18 @@
+#include "yaml-cpp/yaml.h"
+#include "Params.h"
+
+namespace openhw {
+
+    class YamlParamSetter {
+        private:
+            Params* params;
+            std::string yamlFilePath;
+        public:
+            YamlParamSetter(Params* params, std::string yamlFilePath);
+            void setParams();
+        private:
+            YAML::Node loadConfigFile();
+            void setSimulationParameters(YAML::Node config, std::string base, std::string paramBase);
+            void redefineParameter(std::string base, std::string paramBase, YAML::const_iterator paramIterator);
+    };
+}
diff --git a/vendor/riscv/riscv-isa-sim/riscv/riscv.mk.in b/vendor/riscv/riscv-isa-sim/riscv/riscv.mk.in
index c5d626393..14364f792 100644
--- a/vendor/riscv/riscv-isa-sim/riscv/riscv.mk.in
+++ b/vendor/riscv/riscv-isa-sim/riscv/riscv.mk.in
@@ -8,12 +8,14 @@ riscv_subproject_deps = \
 	softfloat \
 
 riscv_CFLAGS = -fPIC
+riscv_LDFLAGS =
 
 riscv_install_shared_lib = yes
 
 riscv_install_prog_srcs = \
 
 riscv_install_hdrs = \
+	YamlParamSetter.h \
 	Params.h \
 	Types.h \
 	abstract_device.h \
@@ -53,6 +55,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	YamlParamSetter.cc \
 	Params.cc \
 	processor.cc \
 	Proc.cc \
@@ -90,6 +93,7 @@ riscv_test_srcs =
 
 riscv_gen_hdrs = \
 	insn_list.h \
+	yaml-cpp \
 
 
 riscv_insn_ext_i = \
diff --git a/vendor/riscv/riscv-isa-sim/riscv/riscv_dpi.cc b/vendor/riscv/riscv-isa-sim/riscv/riscv_dpi.cc
index 3222fc967..7a9778529 100644
--- a/vendor/riscv/riscv-isa-sim/riscv/riscv_dpi.cc
+++ b/vendor/riscv/riscv-isa-sim/riscv/riscv_dpi.cc
@@ -4,6 +4,7 @@
 #include "Simulation.h"
 #include "Types.h"
 #include "riscv/mmu.h"
+#include "YamlParamSetter.h"
 
 #include "svdpi.h"
 #include <vpi_user.h>
@@ -35,22 +36,33 @@ std::vector<std::pair<reg_t, mem_t *>> mem_cuts;
 
 std::vector<mem_cfg_t> memory_map;
 Params params;
+std::unique_ptr<YamlParamSetter> paramSetter;
 
 extern "C" void spike_set_default_params(const char *profile) {
-  if (strcmp(profile, "cva6") == 0) {
+  if (strncmp(profile, "cv64a", 5) == 0) {
     params.set_string("/top/", "isa", std::string("RV64GC"));
     params.set_string("/top/", "priv", std::string(DEFAULT_PRIV)); // MSU
-    params.set_uint64_t("/top/", "num_procs", 0x1UL);
-    params.set_bool("/top/", "bootrom", true);
-    params.set_bool("/top/", "generic_core_config", true);
-    params.set_uint64_t("/top/", "dram_base", 0x80000000UL);
-    params.set_uint64_t("/top/", "dram_size", 0x400UL * 1024 * 1024);
-    params.set_bool("/top/", "max_steps_enabled", false);
-    params.set_uint64_t("/top/", "max_steps", 2000000UL);
-
-    params.set_string("/top/core/0/", "name", std::string("cva6"));
-    params.set_string("/top/core/0/", "isa", std::string("RV64GC"));
+    params.set_string("/top/cores/", "isa", std::string("RV64GC"));
+  } else if (strncmp(profile, "cv32a", 5) == 0) {
+    params.set_string("/top/", "isa", std::string("RV32IMC"));
+    params.set_string("/top/", "priv", std::string("M"));
+    params.set_string("/top/cores/", "isa", std::string("RV32IMC"));
+  } else  {
+    std::cerr << "[SPIKE] spike_set_default_params(): UNSUPPORTED target config '" << profile << "', cannot continue!\n";
+    exit(1);
   }
+  params.set_string("/top/core/0/", "name", std::string(profile));
+  params.set_uint64_t("/top/", "num_procs", 0x1UL);
+  params.set_bool("/top/", "bootrom", true);
+  params.set_bool("/top/", "generic_core_config", false);
+  params.set_uint64_t("/top/", "bootrom_base", 0x10000UL);
+  params.set_uint64_t("/top/", "bootrom_size", 0x1000UL);
+  params.set_uint64_t("/top/", "dram_base", 0x80000000UL);
+  params.set_uint64_t("/top/", "dram_size", 0x400UL * 1024 * 1024);
+  params.set_bool("/top/", "max_steps_enabled", false);
+  params.set_uint64_t("/top/", "max_steps", 2000000UL);
+
+  Simulation::default_params(params);
 }
 
 extern "C" void spike_set_param_uint64_t(const char *base, const char *name,
@@ -68,17 +80,23 @@ extern "C" void spike_set_param_bool(const char *base, const char *name,
   params.set_bool(base, name, value);
 }
 
+extern "C" void spike_set_params_from_file(const char *yaml_config_path) {
+  cerr << "[SPIKE] Setting parameters from file : " << yaml_config_path << endl;
+  paramSetter = std::make_unique<YamlParamSetter>(&params, yaml_config_path);
+  paramSetter->setParams();
+}
+
 extern "C" void spike_create(const char *filename) {
   std::cerr << "[SPIKE] Starting 'spike_create'...\n";
-
   // TODO parse params from yaml
-  string isa_str = (params["/top/isa"]).a_string;
+  string isa_str = (params["/top/core/0/isa"]).a_string;
+  string priv_str = (params["/top/core/0/priv"]).a_string;
 
   cfg_t *config = new cfg_t(
       /*default_initrd_bounds=*/std::make_pair((reg_t)0, (reg_t)0),
       /*default_bootargs=*/nullptr,
       /*default_isa=*/isa_str.c_str(), // Built from the RTL configuration
-      /*default_priv=*/DEFAULT_PRIV,   // TODO FIXME Ditto
+      /*default_priv=*/priv_str.c_str(),   // TODO FIXME Ditto
       /*default_varch=*/DEFAULT_VARCH, // TODO FIXME Ditto
       /*default_misaligned=*/false,
       /*default_endianness*/ endianness_little,
diff --git a/vendor/riscv/riscv-isa-sim/spike_main/spike.cc b/vendor/riscv/riscv-isa-sim/spike_main/spike.cc
index dddecb47c..a25f3fa7f 100644
--- a/vendor/riscv/riscv-isa-sim/spike_main/spike.cc
+++ b/vendor/riscv/riscv-isa-sim/spike_main/spike.cc
@@ -19,6 +19,7 @@
 #include <fstream>
 #include <limits>
 #include <cinttypes>
+#include "YamlParamSetter.h"
 #include "../VERSION"
 
 #define stringify(s) tostr(s)
@@ -126,6 +127,7 @@ static void help(int exit_code = 1)
                   "                        A uint64_t value can be any unsigned number literal\n"
                   "                        in C/C++ syntax (42, 0x2a, etc.)\n"
                   "                        This flag can be used multiple times.\n");
+  fprintf(stderr, "  --param-file <Yaml file path>  Set parameters to file-specified value (see 'spike --print-params' for a full list.)\n");
 
   exit(exit_code);
 }
@@ -463,6 +465,7 @@ int main(int argc, char** argv)
 
   option_parser_t parser;
   openhw::Params params;
+  std::unique_ptr<openhw::YamlParamSetter> paramSetter;
 
   parser.help(&suggest_help);
   parser.option('h', "help", 0, [&](const char UNUSED *s){help(0);});
@@ -513,6 +516,7 @@ int main(int argc, char** argv)
   });
   parser.option(0, "steps", 1, [&](const char* s){max_steps = strtoull(s, 0, 0);});
   parser.option(0, "param", 1, [&](const char* s){params.setFromCmdline(s);});
+  parser.option(0, "param-file", 1, [&](const char* s){paramSetter = std::make_unique<openhw::YamlParamSetter>(&params, s);});
   parser.option(0, "dm-progsize", 1,
       [&](const char* s){dm_config.progbufsize = atoul_safe(s);});
   parser.option(0, "dm-no-impebreak", 0,
@@ -618,6 +622,7 @@ int main(int argc, char** argv)
     cfg.hartids = default_hartids;
   }
 
+  openhw::Simulation::default_params(params);
   if (max_steps != 0) {
     params.set_uint64_t("/top/", "max_steps", max_steps);
     params.set_bool("/top/", "max_steps_enabled", true);
@@ -627,7 +632,8 @@ int main(int argc, char** argv)
   params.set_uint64_t("/top/", "num_procs", cfg.nprocs());
   params.set_string("/top/core/0/", "isa", std::string(cfg.isa()));
   params.set_string("/top/core/0/", "priv", std::string(cfg.priv()));
-
+  if(paramSetter != NULL)
+    paramSetter->setParams();
   openhw::Param param = params.get("/top/core/0/misa_we");
   std::cerr << "[spike.cc:main()] Value of '/top/core/0/misa_we' = " << (param.name != "" ? (param.a_bool ? "true" : "false") : "UNDEFINED") << "\n";
 
diff --git a/vendor/riscv/riscv-isa-sim/spike_main/spike_main.mk.in b/vendor/riscv/riscv-isa-sim/spike_main/spike_main.mk.in
index 25a7a6c61..504fdd45f 100644
--- a/vendor/riscv/riscv-isa-sim/spike_main/spike_main.mk.in
+++ b/vendor/riscv/riscv-isa-sim/spike_main/spike_main.mk.in
@@ -14,3 +14,5 @@ spike_main_install_prog_srcs = \
 spike_main_srcs = \
 
 spike_main_CFLAGS = -fPIC
+
+spike_main_gen_hdrs = \
diff --git a/vendor/riscv/riscv-isa-sim/yaml-cpp b/vendor/riscv/riscv-isa-sim/yaml-cpp
new file mode 160000
index 000000000..f73201411
--- /dev/null
+++ b/vendor/riscv/riscv-isa-sim/yaml-cpp
@@ -0,0 +1 @@
+Subproject commit f7320141120f720aecc4c32be25586e7da9eb978
